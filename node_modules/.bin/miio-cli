#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const miio = __importStar(require("miio-api"));
const yargs_1 = __importDefault(require("yargs"));
const chalk_1 = __importDefault(require("chalk"));
const error = chalk_1.default.bold.red;
const warning = chalk_1.default.bold.yellow;
const argv = yargs_1.default
    .scriptName("miio-cli")
    .options({
    token: {
        alias: "t",
        demandOption: true,
        describe: "device token",
        type: "string",
    },
    address: {
        alias: "a",
        demandOption: true,
        describe: "device IP address",
        type: "string",
    },
    attempts: {
        alias: "c",
        describe: "Retry attempts count",
        type: "number",
        default: 1,
    },
    delay: {
        alias: "d",
        describe: "Retry delay (seconds)",
        type: "number",
        default: 1,
    },
    timeout: {
        alias: "l",
        describe: "Response wait timeout (seconds)",
        type: "number",
        default: 5,
    },
})
    .command("$0 <method> <args>", "Execute device command", (yargs) => {
    yargs
        .positional("method", {
        describe: `Name of device method to call. Examples: "miIO.info", "get_props", "set_props", "get_properties", etc.`,
        demandOption: true,
        type: "string",
    })
        .positional("args", {
        describe: "Method arguments as JSON string",
        demandOption: true,
        type: "string",
        default: "[]",
    });
})
    .check((argv) => {
    if (!argv.token.match(/^[a-f0-9]{32}$/i)) {
        throw new Error(`Invalid token "${argv.token}", expected 32 hex digits`);
    }
    if (!argv.address.match(/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/)) {
        throw new Error(`Invalid IP address "${argv.address}"`);
    }
    try {
        JSON.parse(argv.args);
    }
    catch (e) {
        throw new Error(`Invalid method args: ${e.message}`);
    }
    return true;
})
    .fail(function (msg) {
    console.log(error(msg));
    process.exit(1);
}).argv;
(async () => {
    let device;
    try {
        device = await miio.device({
            address: argv.address,
            token: argv.token,
        }, {
            attempts: argv.attempts,
            timeout: argv.timeout * 1000,
            delay: argv.delay * 1000,
        });
    }
    catch (err) {
        console.log(error(`${err.constructor.name}: ${err.message}`));
        if (err instanceof miio.SocketError) {
            console.log(warning("Please, check that provided IP address is correct!"));
        }
        return;
    }
    try {
        const args = JSON.parse(argv.args);
        const result = await device.call(argv.method, args, {
            attempts: argv.attempts,
            timeout: argv.timeout * 1000,
            delay: argv.delay * 1000,
        });
        console.log(result);
    }
    catch (err) {
        console.log(error(`${err.constructor.name}: ${err.message}`));
        if (err instanceof miio.ProtocolError) {
            console.log(warning("Please, check that provided token is correct!"));
        }
    }
    finally {
        device.destroy();
    }
})();
//# sourceMappingURL=index.js.map