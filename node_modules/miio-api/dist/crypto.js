"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decrypt = exports.encrypt = exports.hash = void 0;
const crypto_1 = __importDefault(require("crypto"));
/**
 * Returns md5 hash of data.
 *
 * @param data - data to hash
 * @returns The md5 hash of `data` (16 bytes)
 */
function hash(data) {
    return crypto_1.default.createHash("md5").update(data).digest();
}
exports.hash = hash;
/**
 * Encrypts data with AES-128-CBC using provided key and iv.
 *
 * @param key - encryption key (16 bytes)
 * @param iv - initialization vector (16 bytes)
 * @param data - data to encrypt
 * @returns `data` encrypted with AES-128-CBC using provided `key` and `iv`.
 */
function encrypt(key, iv, data) {
    const cipher = crypto_1.default.createCipheriv("aes-128-cbc", key, iv);
    return Buffer.concat([cipher.update(data), cipher.final()]);
}
exports.encrypt = encrypt;
/**
 * Decrypts AES-128-CBC encrypted data using provided key and iv.
 *
 * @param key - encryption key (16 bytes)
 * @param iv - initialization vector (16 bytes)
 * @param data - data to decrypt (length = 16 * n)
 * @returns decrypted `data`.
 */
function decrypt(key, iv, data) {
    const decipher = crypto_1.default.createDecipheriv("aes-128-cbc", key, iv);
    return Buffer.concat([decipher.update(data), decipher.final()]);
}
exports.decrypt = decrypt;
//# sourceMappingURL=crypto.js.map