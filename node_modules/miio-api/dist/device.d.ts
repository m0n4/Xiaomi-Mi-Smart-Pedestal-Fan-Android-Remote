import Socket from "./socket";
export declare type DeviceParams = {
    address: string;
    token: string;
    deviceId: number;
    socket?: Socket;
    lastSeenAt?: number;
    timestamp?: number;
};
export declare type DiscoverParams = {
    address: string;
    token: string;
};
export declare type CallOptions = {
    attempts?: number;
    delay?: number;
    timeout?: number;
};
declare class Device {
    static PORT: number;
    static MAX_CALL_INTERVAL: number;
    static DEFAULT_CALL_OPTIONS: CallOptions;
    private protocol;
    private socket;
    private timestamp;
    private lastSeenAt;
    private handshakePromise;
    private log;
    /**
     * Device identifier.
     */
    id: number;
    /**
     * Represents a miIO `Device`.
     *
     * @param params - device parameters
     * @param params.address - device IP address
     * @param params.token - device token
     * @param params.deviceId - device identifier
     * @param params.socket - socket
     * @param params.lastSeenAt - time of last communication with device
     * @param params.timestamp - last device timestamp
     *
     * @remarks
     * It is recommended not to create device using this constructor but to
     * use `Device.discover` method instead.
     * Parameters `socket`, `lastSeenAt` and `timestamp` are optional and introduced only to
     * be able to avoid double handshake at the start.
     */
    constructor(params: DeviceParams);
    /**
     * Makes handshake.
     *
     * @param socket - device socket
     * @param options - call options
     * @returns `Promise` with handshake result
     */
    private static handshake;
    /**
     * Connects to device, makes handshake and returns ready to use `Device` instance.
     *
     * @param params - discover parameters
     * @param params.address - device IP address
     * @param params.token - device token
     * @param callOptions - additional options
     * @param callOptions.attempts - handshake attempts
     * @param callOptions.delay - delay between attempts
     * @param callOptions.timeout - handshake response timeout
     * @returns `Device` instance
     */
    static discover(params: DiscoverParams, callOptions?: CallOptions): Promise<Device>;
    /**
     * Makes handshake.
     *
     * @param options - call options
     * @returns `Promise` with handshake result
     *
     * @remarks
     * If called simultaneous do handshake only once and returns the same
     * promise for all callers
     *
     */
    private handshake;
    /**
     * Returns result of device method call.
     *
     * @param method - device method to call
     * @param params - method parameters
     * @param callOptions - additional options
     * @param callOptions.attempts - call attempts
     * @param callOptions.delay - delay between attempts
     * @param callOptions.timeout - call response timeout
     * @returns result `method` call
     */
    call<ParamsType extends Array<unknown>, ResultType>(method: string, params?: ParamsType, callOptions?: CallOptions): Promise<ResultType>;
    /**
     * Cleans resources associated with the device.
     */
    destroy(): Promise<void>;
}
export default Device;
