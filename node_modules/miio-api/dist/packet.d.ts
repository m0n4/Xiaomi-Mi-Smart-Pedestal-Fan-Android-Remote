/// <reference types="node" />
export declare type PacketData = {
    magic: number;
    size: number;
    unknown: number;
    deviceId: number;
    timestamp: number;
    checksum: Buffer;
    data: Buffer;
};
export declare type PacketDataRequired = Omit<PacketData, "magic" | "size" | "unknown">;
declare class Packet {
    static MAGIC: number;
    static OFFSETS: {
        MAGIC: number;
        SIZE: number;
        UNKNOWN: number;
        DEVICE_ID: number;
        TIMESTAMP: number;
        CHECKSUM: number;
        DATA: number;
    };
    static HEADER_SIZE: number;
    static CHECKSUM_SIZE: number;
    unknown: number;
    deviceId: number;
    timestamp: number;
    checksum: Buffer;
    data: Buffer;
    /**
     * Represent miIO protocol `Packet`.
     *
     * @param fields - fields required to build a `Packet`
     * @param unknown - "unknown" field of packet (0xffffffff for handshake and 0 for any other packet)
     */
    constructor(fields: PacketDataRequired, unknown?: number);
    /**
     * Parses binary `Buffer` into a `Packet`.
     *
     * @param buf - `Buffer` to parse
     * @returns `Packet` parsed from `buf`
     */
    static fromBuffer(buf: Buffer): Packet;
    /**
     * Returns `Packet` length.
     *
     * @returns `Packet` length in bytes
     */
    get length(): number;
    /**
     * Packs `Packet` into a `Buffer`.
     *
     * @returns `Buffer` with `Packet` data
     */
    toBuffer(): Buffer;
}
export default Packet;
