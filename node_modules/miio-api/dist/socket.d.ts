/// <reference types="node" />
import dgram from "dgram";
declare class Socket {
    ip: string;
    port: number;
    version: number;
    socket: dgram.Socket;
    private connectPromise;
    /**
     * Represents a UDP socket.
     *
     * @param ip - IP address
     * @param port - port
     */
    constructor(ip: string, port: number);
    /**
     * Checks if socket is connected.
     *
     * @returns `true` if socket is connected and `false` otherwise
     */
    private isConnected;
    /**
     * Connects socket to the provided IP and port.
     *
     * @returns `Promise` which will be resolved when socket is connected
     *
     * @remarks
     * If called simultaneous do connect only once and return same promise for
     * all callers
     */
    private connect;
    /**
     * Sends data to the socket and returns response wrapped in `Promise`.
     *
     * @remarks
     * Because data is sent using UDP, responses may come in random order
     * and it is requred to parse binary response and check if it matches
     * the request.
     *
     * @param data - data to send
     * @param parse - parse function
     * @param match - match function (checks if response matches the request)
     * @param timeout - response timeout
     * @returns `Promise` which will be resolved when matched response come or
     *    rejected in case of error or timeout
     */
    send<ResponseType>(data: Buffer, parse: (msg: Buffer) => ResponseType, match: (data: ResponseType) => boolean, timeout?: number): Promise<ResponseType>;
    /**
     * Closes socket.
     */
    close(): Promise<void>;
}
export default Socket;
