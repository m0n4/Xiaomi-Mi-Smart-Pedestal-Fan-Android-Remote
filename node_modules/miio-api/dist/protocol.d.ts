/// <reference types="node" />
import Packet from "./packet";
export declare type Request<ParamsType extends Array<unknown>> = {
    id: number;
    method: string;
    params?: ParamsType | [];
};
export declare type Response<ResultType> = {
    id: number;
    result: ResultType;
} | {
    id: number;
    error: {
        code: number;
        message: string;
    };
};
declare class Protocol {
    static HANDSHAKE_PACKET: Packet;
    private deviceId;
    private key;
    private iv;
    private token;
    /**
     * Represents miIO protocol.
     *
     * @param deviceId - device id
     * @param token - device token
     */
    constructor(deviceId: number, token: Buffer);
    /**
     * Checks if `Packet` is handshake packet.
     *
     * @param packet - `Packet` to check
     * @returns `true` if packet is handshake packet and `false` otherwise
     */
    static isHandshake(packet: Packet): boolean;
    /**
     * Returns ready to send `Packet` for the given `Request`.
     *
     * @param req - request
     * @param req.id - random int
     * @param req.method - device method to call
     * @param req.params - method params
     * @param timestamp - device timestamp
     * @returns `Packet` for the given `req` and `timestamp`
     */
    packRequest<ParamsType extends Array<unknown>>(req: Request<ParamsType>, timestamp: number): Packet;
    /**
     * Extracts device reponse from `Packet`.
     *
     * @param packet - response `Packet`
     * @returns `Response` extracted from the given `packet`
     */
    unpackResponse<ResultType>(packet: Packet): Response<ResultType>;
    /**
     * Calculates a checksum for the given `Packet`.
     *
     * @param fields - `Packet` fields required for checksum calculation.
     * @returns checksum for `Packet` constructed from `fields`
     */
    private calcChecksum;
    /**
     * Validates checksum of the given `Packet`.
     *
     * @param packet - `Packet` to validate
     * @returns `true` if checksum is correct and `false` otherwise
     */
    private validateChecksum;
}
export default Protocol;
